class Solution
{
    // arr[]: Input Array
    // N : Size of the Array arr[]
    //Function to count inversions in the array.
    static long inversionCount(long arr[], long N)
    {
        // Your Code Here
        return mergeSort(arr,0,N-1);
    }
    
    static long mergeSort(long[] arr,long i,long j) {
        long res=0;
        if(i<j) {
            long m=(i+j)/2;
            res+=mergeSort(arr,i,m);
            res+=mergeSort(arr,m+1,j);
            res+=merge(arr,i,m,j);
        }
        return res;
    }
    
    static long merge(long[] arr,long l,long m,long r) {
        long n1=m-l+1;
        long n2=r-m;
        long[] arr1=new long[(int)n1];
        long[] arr2=new long[(int)n2];
        for(int i=0;i<n1;i++)
            arr1[i]=arr[i+(int)l];
        for(int i=0;i<n2;i++)
            arr2[i]=arr[i+(int)m+1];
        int i=0,j=0,k=(int)l;
        long inv=0;
        while(i<n1 && j<n2) {
            if(arr1[i]<=arr2[j]) {
                arr[k++]=arr1[i++];
            } else {
                inv+=(n1-i);
                arr[k++]=arr2[j++];
            }
        }
        while(i<n1)
            arr[k++]=arr1[i++];
        while(j<n2)
            arr[k++]=arr2[j++];
        return inv;
    }
}
